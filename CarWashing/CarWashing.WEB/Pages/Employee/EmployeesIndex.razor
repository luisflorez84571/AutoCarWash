@page "/employees"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]


<h3>Empleado</h3>

@if(Employees is null)
{
    <p>Cargando...</p>

}else
{
    <GenericList MyList="Employees">
        <Body>
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Empleado
                <a class="btn btn-sm btn-primary float-end" href="/employees/create"><i class="oi oi-plus"></i> Adicionar Empleado</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Empleado..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>
          </div>
     

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

       
        <table class="table table-striped">
            <thead>
                <tr>
                <th></th>
                    <th>Employee</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in Employees!)
                {
                    <tr>
                        <td>
                            @employee.Nombre
                        </td>
                        <td>
                            @employee.Document
                        </td>
                        <td>
                            @employee.HorarioTrabajo
                        </td>
                        <td>
                        <a href="/employees/edit/@employee.EmployeeId" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(employee.EmployeeId))><i class="oi oi-trash" /> Borrar</button>
                    </td>
                       
                    </tr>
                }
            </tbody>
        </table>
    </div>
    </Body>
    </GenericList>
}
 
@code {    

    private int currentPage = 1;
    private int totalPages;

    public List<Employee> Employees { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/employees?page={page}";
            url2 = $"api/employees/totalPages";
        }
        else
        {
            url1 = $"api/employees?page={page}&filter={Filter}";
            url2 = $"api/employees/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Employee>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Employees = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/employees/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}



