@page "/vehicles"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]



<h3>vehiculo</h3>

    @if(Vehicles is null)
    {
        <p>Cargando...</p>

    }else
    {
        <GenericList MyList="Vehicles">
         <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Vehiculo
                        <a class="btn btn-sm btn-primary float-end" href="/vehicles/create"><i class="oi oi-plus"></i> Adicionar Vehiculo</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Empleado..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>
                    </div>

                <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

                <div class="mb-3">
                    <a class="btn btn-primary" href="/vehicles/create">Nuevo Vehiculo</a>
                </div>
        
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Datos del Vehiculo</th>                    
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var vehicle in Vehicles!)
                        {
                            <tr>
                                <td>
                                    @vehicle.VehicleId-
                                    @vehicle.Marca
                                    @vehicle.Color
                                    - Placa: @vehicle.NumeroPlaca                            
                                </td>
                                <td>
                                    <a href="/vehicles/edit/@vehicle.VehicleId" class="btn btn-warning">Editar</a>
                                    <button class="btn btn-danger" @onclick=@(() => DeleteAsync(vehicle))>Borrar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
           </Body>
        </GenericList>
        
        }
@code {
    private int currentPage = 1;
    private int totalPages;
    public List<Vehicle> Vehicles { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/vehicles?page={page}";
            url2 = $"api/vehicles/totalPages";
        }
        else
        {
            url1 = $"api/vehicles?page={page}&filter={Filter}";
            url2 = $"api/vehicles/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Vehicle>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Vehicles = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(Vehicle vehicle)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"/api/vehicles/{vehicle.VehicleId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}

