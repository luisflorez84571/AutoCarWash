@using CarWashing.Shared.Entities;
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <h3>Tipo de Servicio:</h3>
         <form>
           <label for="Servicios">Servicios:</label>
            <select id="Servicios" name="Servicios">
                <option value="sencilla1">Lavada sencilla</option>
                <option value="full2">Lavada full</option>
                <option value="motor3">Lavada de Motor</option>
                <option value="brillada4">Brillada</option>                
            </select>
        </form> 
        <br />
        <h3>Tipo de Vehiculo:</h3>
        <form>
            <label for="Vehiculo">Vehiculo:</label>
            <select id="Vehiculo" name="Vehiculo">
                <option value="Liviano1">Liviano</option>
                <option value="Camioneta2">Camioneta</option>
                <option value="Van3">Van</option>
                <option value="Camion4">Camion</option>
            </select>
        </form>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {


    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Service);

    }


    [EditorRequired]
    [Parameter]
    public Service Service { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}