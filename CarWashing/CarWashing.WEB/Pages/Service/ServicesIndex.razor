@page "/services"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Servicio</h3>

@if (services is null)
{
    <p>Cargando...</p>

}
else
{
    <GenericList MyList="services">
        <Body>
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Servicio
                <a class="btn btn-sm btn-primary float-end" href="/services/create"><i class="oi oi-plus"></i> Adicionar Servicio</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Empleado..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>
        </div>


    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

        <GenericList MyList="services">        
            <Body>
                <div class="card">
                    <div class="card-header">
                        <span>
                            <i class="oi oi-list"></i> Servicios
                            <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar Servicio</a>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                            <div>
                                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar categoría..." @bind-value="Filter" />
                            </div>
                            <div class="mx-1">
                                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                            </div>
                        </div>

                        <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />

                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Servicio</th>
                                    <th style="width:200px"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var service in services)
                                {
                                    <tr>
                                        <td>
                                            @service.Vehiculo
                                        </td>
                                        <td>
                                            @service.Precio
                                        </td>
                                        <td>
                                            @service.Servicio
                                        </td>
                                        <td>
                                            <a @onclick=@(() => ShowModal(service.ServiceId, true)) class="btn btn-warning"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(service.ServiceId))><i class="oi oi-trash" /> Borrar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </Body>
        </GenericList>
      </div>
        </Body>
    </GenericList>
 }
}

@code {
    public List<Service> services { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<ServiceEdit>(string.Empty, new ModalParameters().Add("ServiceId", id));
        }
        else
        {
            modalReference = Modal.Show<ServiceCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/services?page={page}";
            url2 = $"api/services/totalPages";
        }
        else
        {
            url1 = $"api/services?page={page}&filter={Filter}";
            url2 = $"api/services/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Service>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            services = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DeleteAsync(int serviceId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/services/{serviceId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}


