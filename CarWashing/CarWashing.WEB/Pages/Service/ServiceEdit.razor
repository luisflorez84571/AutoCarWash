@page "/services/edit/{ServiceId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Servicio</h3>

@if (service is null)
{
    <p>Cargando...</p>
}
else
{
    <ServiceForm @ref="serviceForm" Service="service" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Service service;
    private ServiceForm serviceForm;

    [Parameter]
    public int ServiceId { get; set; }    

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Service>($"/api/services/{ServiceId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/services");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        service = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/services", service);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        serviceForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/services");
    }
}
